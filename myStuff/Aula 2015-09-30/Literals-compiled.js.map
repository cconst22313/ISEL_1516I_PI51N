{"version":3,"sources":["Literals.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,CAAC,GAAG;;AAEJ,MAAE,EAAE,CAAC;AACL,MAAE,EAAE,KAAK;AACT,MAAE,EAAE,YAAS,CAAC,EAAE;AAAE,eAAO,QAAQ,GAAG,CAAC,CAAA;KAAE;;AAEvC,MAAE,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE;AAChB,MAAE,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,YAAW,EAAE,EAAE,EAAE,CAAC;CACvC,CAAC;;;AAGF,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC;AAChC,IAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,GAAG,EAAC,GAAG,EAAE,YAAY,CAAC,CAAC","file":"Literals-compiled.js","sourcesContent":["/**\r\n * Created by cconstantino on 05-10-2015.\r\n */\r\n//Como se criam objectos?\r\n//\r\n//1. Literal: (deffeni��o literal de um objecto\r\nvar o = {\r\n    //um campo pode ter uma express�o\r\n    f1: 5,\r\n    f2: \"abc\",\r\n    f3: function(a) { return \"Hello \" + a },\r\n    //pode ter outro objecto!\r\n    f4: { a: \"SLB\" },\r\n    f5: [5,\"SLB\", {}, function() {}, []]\r\n};\r\n\r\n//Existe de forma n�o literal, na forma de objecto:\r\nvar n = new Number(5);\r\nvar str = new String(\"Benfica\");\r\nvar f = new Function(\"a\",\"b\", \"return a*b\");  //<- N�o vamos usar porque � menos eficiente e s� deve ser usado em casos espec�ficos\r\n//console.log(f(2,3));                         // serve para criar c�digo em tempo de execu��o!!!!"]}