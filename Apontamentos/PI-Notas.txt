- 3 ou 4 trabalhos/fichas com prazos de entrega
	No qual se inclui o trabalho final

- fichas: 1?
Até aqui, vale 60%, no qual o trabalho final e discussão têm um peso maior


- Teste + Repetição (40%)

Para o primeiro trabalho, é necessário fazer código numa qualquer linguagem que possa fazer pedidos http

1. Javascript e nodeJs para se poder fazer o primeiro trabalho

O que se vem aprender?
- Aplicações na Web
A ideia é começar a olhar para as app web no sentido de as fazer. Para o fazer tem que se ter um conjunto de conhecimentos:
2 componentes:
	- Cliente (foco em browser)
		- HTML 5
		- CSS
		- Javascript + HTML5 Objects + JQwery + ...
	- Servidor 
		- existem várias, por isso vai-se adoptar Node.JS, por ser a que parece a mais adequada
		(podia-se usar: ASP.NET MVC, Ruby on Rails, PHP, ...)

Para colar as duas componentes acima:
 	- HTTP!!!


Ler Javasript?!

Ver os livros aconcelhados

**********************************************************************************************************************************************
*	23-09-2015
**********************************************************************************************************************************************
INSTRUÇÃO: é a unidade mínima indivisível para expressar uma ordem. Por si só não produz nada nem faz nada. (ex. )
		   instrução necessita do ;... por exemplo: int a = 10; Só o é quando terminado por ;
		   outro exemplo: m( ); -> instrução, mas apenas o m( ) é uma explessão...
		   IF( ).. é um outro exemplo
		   composto por:
		   palavra reservada ('IF'), simbolo ( '(' ), expressão, simbolo ( ')' ), instrução composta, que começa e termina por { },
		   ...
		   Class xpot{
		   		...
		   }  //isto é uma instrução!!!!
		   --> produzem erros sintáticos
		   --> as instruções não têm tipo!
		   --> "as  instruções em si, não fazem nada!"

EXPRESSÃO: Expressões são partes constituites das instruções... PODEM ser compostas!!!
		   As expressões quando executadas PRODUZEM um valor!!! TODAS sem excepção!
		   --> produzem erros semânticos!!! Quando o resultado da expressão não é compatível com o espectável
		   --> apenas as expressões têm tipo!!!!
		   		"SLB" é uma instrução d tipo String

		   EXPRESSÕES COMPOSTAS
		   System.out.println("SLB")


O que é a semântica? o significado de algo... 
O compilador apenas consegue validar a semântica dos tipos! 
Exemplo básico: int x = "asdfg"... o compilador avalia os tipos e verifica a sua compatibilidade

LINGUAGEM IMPERATIVA: permite (a mim) mandar executar algo. O que escrevo são sequencias de ordens->INSTRUÇÕES



ahhaha: um porgrama em JScript é uma sequencia de instruções hahahh
JAVASCRIPT
............................................................................................
............................................................................................
............######  ####  ##   ##  ####	  ####   #### #####   #### #####  ######............
...............##  ##  ##  ## ##  ##  ## ##     ##    ##  ##   ##  ##  ##   ##..............
...............##  ##  ##  ## ##  ##  ##  ####  ##    #####    ##  #####    ##..............
............## ##  ######   ###   ######     ## ##    ##  ##   ##  ##       ##..............
.............###   ##  ##    #	  ##  ##  ####   #### ##   ## #### ##       ##..............
............................................................................................
............................................................................................

█


*****************************************************************************
*	23-09-2015
****************************************************************************

O que é um literal? um literal é uma expressão constante... vale pelo valor que é.

Tem palavras reservadas ou um conjunto de regras para representar um valor.

No JScript podem existir objectos litetrais que são constante. Se forem alterados, é criado um onbjecto replica, que esse sim é mutável!

Os tipos no JScript são 6:
	- numbers
	- strings
	- Booleans
	- objects
	- functions
	- undefined

Os tipos servem (numa linguagem strongly-typed) para:
	1. saber quanta memória é necessário reservar
	2. limitar os valores válidos que podem conter
	3. aceder ao comportamento e dados associcados a esse tipo

O que não tem tipo, são as váriáveis. Em JAVA ou C uma determinada variável serve apenas para valores daquele tipo. No JScript não: as variáveis não são definidas pelo programador. O tipo da variável depende do que lá estiver. Ex:
1 - var x = "SLB";
2 - var y = x + 35; //SLB35
3 - x = 10;
4 - y = x + 35:		//45

2 e 4 são iguais, mas retornam coisas diferentes!!!

NUMBERS
operador + tem um comportamento ligeiramente diferente: um operador necessita de operandos (operandos=expressões):
  - unários: apenas tem que ter um operando
  - binários: 

var z;
console.log(z); //undefined... não foi declardo!

Quande soma uma coisa com um numero, mas a "coisa nao corre bem" -Z NaN - Not a Number

Quando se divide um valor que deveria dar um devide by zero: dá infinity.

Uma coisa gira: para colocar " dentro duma string: '"XPTO"' ou ao contrário
Ter cuidado com:
x="10"; console.log(x++);
x="10"; console.log(x = x + 1);
São duas coisas diferentes!!!!

Outra diferença: == e ===
10 == "10" 		//true
10 === "10"		//false
0 == false		//true
0 === false		//false

O == usa conversões
O === não usa conversões!


ECMA 6 -
No node tem que se correr com o sufixo --harmony
	

FUNçÕES:
cada vez que se chama um função é criado um novo contexto. Nesse contexto existem
  * parametros formais
  * this
  * variáveis locais
  * "arguments" - é algo que se assemelha a um array. Permite o acesso aos argumentos que foram passados com uma sintaxte de array.



Uma fenómeno:
		function showAllArguments(){
		    console.log("~~~~~~~~~~~~~~~ 0 ~~~~~~~~~~~~~~~~~~~");
		    for( var i = 0; i < arguments.length; i++){
		        console.log('Arguments['+i+'] = '+arguments[i]);
		    }
		}

		showAllArguments();
		showAllArguments("SLB",10, 20, 30);
		showAllArguments("SLB"," É o MAIOR!!!");


		function showAllArguments(){
		    console.log("~~~~~~~~~~~~~~~~ 1 ~~~~~~~~~~~~~~~~~~");
		    for( var i = 0; i < arguments.length; i++){
		        console.log('Arguments['+i+'] = '+arguments[i]);
		    }
		}

		showAllArguments();
		showAllArguments("SLB",10, 20, 30);
		showAllArguments("SLB"," É o MAIOR!!!");


O interpretador passa por todo o código antes de executar:
 - se encontrar variáveis, define-as
 - as funções ficam definidas ( a função pode ser invocada antes da sua defenição)



*****************************************************************************
*	30-09-2015
*****************************************************************************
ver funções lambda ou arrow (em javascript)


*****************************************************************************
*	05-10-2015
*****************************************************************************

De cada x q uma função é chamada é criado um contexto. É igual a todas as outras formas de programação na invocação dos métodos (por exemplo)

O qeu contem o contexo de uma função?
* parametros formais (também são variáveis)
* variáveis declaradas dentro das Funções
* as funções lá declaradas <- Confusão gerada por causa disto?

Para criar scopes, temos que chamar funcções!

-> O contexo da função só morre se a funcção continuar viva, através de uma função qeu foi definida dentro dentro do seu contexto (retornando uma referencia para uma função que é definida dentro de uma função)


As funções são cidadãos de primeira classe em Javascript. Onde se pode passar uma variável com um valor.... também podemos ter uma função :)

A aplicabilidade disto qual é? Onde dá jeito?
- poder alterar o comportamento daquele código (em Código OO falamos de Polimorfismo)


--\
	OBJECTOS!
--/

O que uma variavel tem é:
- uma váriavel	(Value Type)
- um objecto    (Reference Type)

--> uma função é um objecto!

--\
	node 	----------------------------------
--/



